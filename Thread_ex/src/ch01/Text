

Thread 란?

process : 프로그램이 실행되면 OS로 부터 메로리를 할당 받아서 프로세스 상태가 된다.
프로세서 안에는 하나의 작업에 단위인 여러 Thread를 가질 수 있다.
thread : 하나의 프로세스 안에 실제 작업을 수행하는 단위이다.

multi threading : 쓰레드가 여러개
여러 thread가 수행되는 프로그래밍, 마치 여러 작업이 동시에 실행되는 효과를 얻을 수 있다.
(하나의 작업만 하는데 너무 빨리 작업되서 여러 작업이 동시에 하는것처럼 보인다)
thread는 각각에 자신만에 작업 공간을 가진다. (context 영역)

두개의 쓰레드가 같은 객체에 접근 할 경우, 동시에 접근 함으로써 오류가 발생
(작업자가 작업을 하다 일이 동시에 겹치면 일이 원할하게 진행 안되는것처럼 똑같다.)
(동시에 하면 더하는 작업자랑 빼는 작업자를 만들었는데 일이 겹쳐서 하나의값에 더하고 빼고 됨)

그러면 어떻게 해줘야 하나?
현재 이 메서드에 속해있는 객체에 lock을 걸어주면 된다.

각 thread 사이에 공유하는 자원이 있을 수 있다(코딩에 따라서)
여러 thread가 자원을 공유하는 작업이 수행되는 경우 서로 자원을 차지 하려는
race condition이 발생할 수 있다 (--> 의도하지 않은 결과를 생성할 수 있다)

이렇게 여러 thread가 공유하는 자원중 경쟁이 발생하는 부분을 critical section  이라고 한다.
critical section 을 해결하려 다루기 위해서 동기화 처리를 하는 것이 바람직하다.
(일종에 순차적 수행을 맡긴다.) 
 

